version: '3'
services:
  postgresql-database:
    container_name: postgresql-database
    image: postgres:12.2
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=easypassword
    deploy: 
      mode: replicated
      replicas: 1

  mongodb-database:
    container_name: mongodb-database
    image: mongo:4.2.5
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mongoadmin
      - MONGO_INITDB_ROOT_PASSWORD=easypassword
      - MONGO_INITDB_DATABASE=mymongodb
    deploy: 
      mode: replicated
      replicas: 1

  grafana-dashboard:
    container_name: grafana-dashboard 
    image: 272952936633.dkr.ecr.us-east-1.amazonaws.com/chat-repo:grafana
    ports:
      - "3000:3000"
    links:
      - prometheus-metrics
    deploy: 
      mode: replicated
      replicas: 1

  prometheus-metrics:
    container_name: prometheus-metrics
    image: 272952936633.dkr.ecr.us-east-1.amazonaws.com/chat-repo:prometheus
    ports:
      - "9090:9090"
    links: 
      - backend-api
    deploy: 
      mode: replicated
      replicas: 1

  rabbitmq-broker:
    container_name: rabbitmq-broker
    build: rabbitmq
    image: 272952936633.dkr.ecr.us-east-1.amazonaws.com/chat-repo:rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
      - "15692:15692"
    deploy: 
      mode: replicated
      replicas: 1

  encryption:
    container_name: encryption
    image: 272952936633.dkr.ecr.us-east-1.amazonaws.com/chat-repo:encryption
    ports:
      - "7799:7799"
    deploy: 
      mode: replicated
      replicas: 1

  backend-api:
    container_name: backend-api
    image: 272952936633.dkr.ecr.us-east-1.amazonaws.com/chat-repo:backend-api
    ports:
      - "7070:7070"
      - "8080:8080"
    links:
      - rabbitmq-broker
      - encryption
      - postgresql-database
      - mongodb-database
    deploy: 
      mode: replicated
      replicas: 1
      placement: 
        constraints:
          - "node.role==manager"
      restart_policy:
        condition: any
        delay: 1s
        max_attempts: 5
        window: 1s
